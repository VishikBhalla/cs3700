#!/usr/bin/python -u

import argparse
import sys
import socket
import json
import time
#import parseurl
#import html
#import html.parser
#import xml

from HTMLParser import HTMLParser

csrfToken = 'start token'
sessionId = 'start session id'
frontier = []
visited = set()

DEBUG = False

class CrawlParser(HTMLParser):
  foundflag = False

  def handle_starttag(self, tag, attrs):
    global frontier
    global visited
    attrDict = {}
    if tag != 'h2' and tag != 'a':
      return

    for attr in attrs:
      attrDict[attr[0]] = attr[1]
    
    if tag == 'h2' and attrDict.get('class') == 'secret_flag':
      print('FOUND SECRET FLAG')
      self.foundflag = True 
    elif tag == 'a':
      href = attrDict.get('href')
      if href.startswith('/fakebook') and href not in visited:
        frontier.append(attrDict.get('href'))
  
  def handle_endtag(self, tag): 
    return

  def handle_data(self, data):
    if self.foundflag:
      print(data)
      self.foundflag = false


def login(sock, username, password):
  global csrfToken
  global sessionId
  if DEBUG:
    print('Username:', username)
    print('Password:', password)
  requestUrl = 'http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/'
  r = 'GET /accounts/login/?next=/fakebook/ HTTP/1.0 \n' + 'Host: fring.ccs.neu.edu\n'
  r = r + 'Connection: keep-alive\n\n'
  sock.sendall(r)
  mes = receiveMessage(sock)
  
  if mes['statusCode'] == '200':
    if DEBUG:
      print('good 200')
  else:
    print('error')
    print(json.dumps(mes))
    return

  csrfToken = mes['cookies']['csrftoken']['value']
  sessionId = mes['cookies']['sessionid']['value']
  
  if DEBUG:
    print("Token:")
    print(csrfToken)

  requestUrl = 'http://fring.ccs.neu.edu/accounts/login/'
  requestBody = 'username=' + username + '&password=' + password + '&csrfmiddlewaretoken=' + csrfToken + '&next=%2Ffakebook%2F'
  r = 'POST /accounts/login/ HTTP/1.0 \n' + 'Host: fring.ccs.neu.edu\n'
  r = r + 'Cookie: csrftoken=' + csrfToken + '; sessionid=' + sessionId + ';\n'
  r = r + 'Referer: http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/\n'
  r = r + 'Content-Type: application/x-www-form-urlencoded\n'
  r = r + 'Connection: keep-alive\n'
  r = r + 'Content-Length: ' + str(len(requestBody)) + '\n\n'
  r = r + requestBody + '\n\n'
  sock.sendall(r)
  
  if DEBUG:
    print(r)
  
  mes = receiveMessage(sock)
  
  if DEBUG:
    print(json.dumps(mes))
  
  if mes.get('statusCode') != '200':
    print('error loggin ing!')
    print(json.dumps(mes, indent=2))
  sessionId = mes['cookies']['sessionid']['value']
  frontier.append('/fakebook/');
  return  


def receiveMessage(sock):
  fullbuff = ''
  d = {}
  mes_header = ''
  mes_body = ''
  body_bytes_received = 0
  content_length = 0
  while 1:
    
    bytes_to_receive = 4096
    if content_length > 0 and content_length - body_bytes_received < 4096:
      bytes_to_receive = content_length - body_bytes_received

    databuff = sock.recv(bytes_to_receive)
    fullbuff = fullbuff + databuff
    
    if DEBUG:
      print(fullbuff)
    
    if content_length == 0:
      end_header_index = databuff.find('\r\n\r\n')
      if end_header_index == -1:
        mes_header += databuff
      else:
        databuff_parts = databuff.split('\r\n\r\n')
        mes_header += databuff_parts[0]
        # parse headers
        firstPart = mes_header.split('\r\n')
        d["statusCode"] = firstPart[0].split(' ')[1]
        d['headers'] = {}
        d['cookies'] = {}
        for line in firstPart[1:]:
          parts = line.split(': ')
          if parts[0] == 'Set-Cookie':
            cookie_parts = parts[1].split('; ')
            first_cookie_part = cookie_parts[0].split('=')
            d['cookies'][first_cookie_part[0]] = {}
            d['cookies'][first_cookie_part[0]]['value'] = first_cookie_part[1]
            for cookie_part in cookie_parts[1:]:
              split_part = cookie_part.split('=')
              d['cookies'][first_cookie_part[0]][split_part[0]] = split_part[1]
          else:
            d['headers'][parts[0]] = parts[1]
        
        mes_body = mes_body + databuff_parts[1]
        body_bytes_received = body_bytes_received + len(databuff_parts[1])
    
        if d['headers'].get('Content-Length'):
          content_length = int(d['headers']['Content-Length'])
        else:
          print('no content length')
          print(json.dumps(d, indent=2))
          # if we weren't given content-length, read until no more data
          while databuff:
            databuff = sock.recv(4096)
            mes_body = mes_body + databuff
          d['data'] = mes_body
          print(json.dumps(d, indent=2))
          return d  
    else:
      mes_body = mes_body + databuff
      body_bytes_received = body_bytes_received + len(databuff)

    # if last received character was a newline, we're done receiving the message
    if body_bytes_received == content_length:
      d['data'] = mes_body
      #print('# received message')
      break
  return d

def build_request(path, csrfToken, sessionId):
  r =  ("GET {0} HTTP/1.0\n"
        "Host: fring.ccs.neu.edu\n"
        "Cookie: csrftoken={1}; sessionid={2};\n"
        "Connection: keep-alive\n\n").format(path, csrfToken, sessionId)
  return r 

def crawl(sock):
  global frontier
  global visited
  global sessionId
  global csrfToken
  if DEBUG:
    print('SESSION ID: ' + sessionId) 
  
  parser = CrawlParser()

  while frontier:
    if DEBUG:
      print('Frontier')
      print(json.dumps(frontier))
      print('Visited')
      print(visited)

    next_link = frontier.pop()
    print(next_link)
    request = build_request(next_link, csrfToken, sessionId)
    
    if DEBUG:
      print('REQUEST')
      print(request)

    sock.sendall(request)
    visited.add(next_link)
    response = receiveMessage(sock)
    try:
      if response['statusCode'] != '200':
        print("Got a non-200 response")
        print(json.dumps(response))
        exit(-1)
      else:
        parser.feed(response['data'])
        if response['cookies'].get('sessionid'):
          sessionId = response['cookies']['sessionid']['value']
    except KeyError:
      print(json.dumps(response))
      exit(-1)
    time.sleep(0.5)    

def main():
  # Parse command line arguments
  parser = argparse.ArgumentParser(description='Simple webcrawler')
  parser.add_argument('user')
  parser.add_argument('password')
  args = parser.parse_args(sys.argv[1:]) # arguments exclude filename

  username = args.user
  password = args.password
  
  # Create a TCP/IP socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

  hostname = 'fring.ccs.neu.edu'
  port = 80

  # get remote ip
  #remote_ip = socket.gethostbyname(hostname)
  #print('# Connecting to server, ' + hostname + ' (' + remote_ip + ')')
  
  # set the socket timeout and connect
  sock.settimeout(5)
  sock.connect((hostname, port))

  # print("# Connected")
  login(sock, username, password)

  # crawl
  crawl(sock)

if __name__ == "__main__":
  main()
