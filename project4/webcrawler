#!/usr/bin/python -u

import argparse
import sys
import socket
import json
#import parseurl
#import html
#import html.parser
#import xml

from HTMLParser import HTMLParser

csrfToken = 'start token'

class MyHTMLParser(HTMLParser):
  def handle_starttag(self, tag, attrs):
    global csrfToken
    print(csrfToken)
    print("Encountered a start tag:", tag)
    attrDict = {}
    for attr in attrs:
      attrDict[attr[0]] = attr[1]
    if attrDict.get("name", '') == 'csrfmiddlewaretoken':
      csrfToken = attrDict['value']

  def handle_endtag(self, tag): 
    print("Encountered an end tag :", tag)

  def handle_data(self, data):
    print("Encountered some data  :", data)



def parseResponse(message):
  d = {}
  m = message.split('\r\n\r\n')
  firstPart = m[0].split('\r\n')
  nextPart = '\r\n\r\n'.join(m[1:])
  
  d["statusCode"] = firstPart[0].split(' ')[1]
  d['headers'] = {}
  print(firstPart[1:])
  for line in firstPart[1:]:
    print(line)
    parts = line.split(': ')
    d['headers'][parts[0]] = parts[1]

  d['data'] = nextPart
  print(json.dumps(d))
  return d

def login(sock, username, password):
  global csrfToken
  print('Username:', username)
  print('Password:', password)
  requestUrl = 'http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/'
  r = 'GET /accounts/login/?next=/fakebook/ HTTP/1.0 \n' + 'Host: fring.ccs.neu.edu\n\n'
  sock.sendall(r)
  rawMes = receiveMessage(sock)
  mes = parseResponse(rawMes)
  
  if mes['statusCode'] == '200':
    print('good 200')
  else:
    print('error')
    print(rawMes)
    return
  
  parser = MyHTMLParser()
  parser.feed(mes['data'])

  print("Token:")
  print(csrfToken)

  requestUrl = 'http://fring.ccs.neu.edu/accounts/login/'
  requestBody = 'username=' + username + '&password=' + password + '&csrfmiddlewaretoken=' + csrfToken + '&next=%2Ffakebook%2F'
  r = 'POST /accounts/login/ HTTP/1.0 \n' + 'Host: fring.ccs.neu.edu\n'
  r = r + 'Referer: http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/\n'
  r = r + 'Content-Type: application/x-www-form-urlencoded\n'
  r = r + 'Content-Length: ' + str(len(requestBody)) + '\n\n'
  r = r + requestBody + '\n\n'
  sock.sendall(r)
  print(r)
  try:
    rawMes = receiveMessage(sock)
  except:
    rawMes = receiveMessage(sock)

  print(rawMes)
  mes = parseResponse(rawMes)

def receiveMessage(sock):
  mes = ''
  while 1:
    data = sock.recv(4096)
    mes += data
    # if last received character was a newline, we're done receiving the message
    print('DATA:', data)
    if data[-1] == '\n':
      #print('# received message')
      break
  #print(mes)
  return mes

def main():
  # Parse command line arguments
  parser = argparse.ArgumentParser(description='Simple webcrawler')
  parser.add_argument('user')
  parser.add_argument('password')
  args = parser.parse_args(sys.argv[1:]) # arguments exclude filename

  username = args.user
  password = args.password
  
  # Create a TCP/IP socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

  hostname = 'fring.ccs.neu.edu'
  port = 80

  # get remote ip
  #remote_ip = socket.gethostbyname(hostname)
  #print('# Connecting to server, ' + hostname + ' (' + remote_ip + ')')
  
  # set the socket timeout and connect
  sock.settimeout(5)
  sock.connect((hostname, port))

  # print("# Connected")
  login(sock, username, password)


if __name__ == "__main__":
  main()
