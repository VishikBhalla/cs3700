#!/usr/bin/python -u

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 1
SEQUENCE = 0

buff = [] # buffer to store data parsed into messages

msg_timeout = 0.5 # inital timeout

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# read all the data into the buffer, parsing into our message format
def read_all_data():
  global SEQUENCE
  global buff
  
  while True:
    data = sys.stdin.read(DATA_SIZE)
    if(len(data) > 0):
      msg = {"sequence": SEQUENCE, "data": data, "ack": False, "eof": False}
      SEQUENCE += len(data)
      buff.append(msg)
    else:
      msg = {"sequence": SEQUENCE, "data": '', "ack": False, "eof": True}
      buff.append(msg)
      break

# send the index-th packet in the buffer
def send_individual_packet(index):
  buff[index]['timestamp'] = time.time() # add the current timestamp in for use in estimating RTT
  buff[index]['timeout'] = msg_timeout # tell the receiver our current timeout for use in ack timeout
  msg = json.dumps(buff[index]) # turn the message into a string
  
  # try and send the message
  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
    return False
  else:
    log("[send data] " + str(buff[index]["sequence"]) + " (" + str(len(buff[index]["data"])) + ")")
    return True

# read all the data
read_all_data()


rtt_moving_avg = 0.5 # initial value for the rtt moving average 

last_seq_num_sent = 0 # the last sequence number we sent 
last_seq_num_acked = 0 # the last sequence number for which we received an ack
# (note, these are not really the sequence numbers we sent, but the ack numbers we expect to receive from their sending)

last_index_acked = 0 # the index in our buffer corresponding to the ack we last received

sliding_window_initial_size = 20 # initial size of our sliding window
current_window_size = sliding_window_initial_size # current window size

eof_sent_once = False # keep track of whether we have sent the eof already this timeout window

# THE LOOP
while True:

  # receiving data portion of THE LOOP

  # for every run through the loop we want to keep track of whether a timeout occurred
  timed_out = False
  
  # if the current window size is 0, then we want to wait on the estimated timeout for a message
  if current_window_size == 0:
    timed_out = True # unless we receive a message while waiting, we will have timed out
    ready = select.select([sock],[],[],msg_timeout) # select with timeeout
    if ready[0]:
      timed_out = False # if we did manage to receive an ack, well then I guess we didn't time out after all
  
  # loop to keep receiving acks until there are no more waiting to be read   
  while True:
    ready = select.select([sock],[],[],0) # poll to see if we have an ack to read
    if ready[0]:
      # read the data if it exists
      (data, addr) = sock.recvfrom(MSG_SIZE)
      try:
        decoded = json.loads(data)

        # log the ACK to STDERR
        log("[recv ack] " + str(decoded['ack']))
        
        # update RTT estimate and corresponding timeout value
        timeReceived = time.time()
        timeSent = decoded['timestamp']
        sample_rtt = timeReceived - timeSent
        rtt_moving_avg = rtt_moving_avg * 0.875 + sample_rtt * 0.125
        msg_timeout = 1.5 * rtt_moving_avg
        
        # if we got final ack, just quit gracefully
        if decoded['ack'] - 1 == buff[-1]['sequence']:
          log("[completed]")
          sys.exit(0)

        # if ack is the same as last highest ack, do nothing
        # if ack is different from last highest ack, we have a new highest ack
        # and we update window size by number of unacked packets between the two "highest acks"
        # also, if our new highest ack is greater than last seq num sent, update last sent
        if decoded['ack'] > last_seq_num_acked:
          message_just_acked = [m for m in buff if m['sequence'] == decoded['ack']][0] # figure out which message we just received an ack for
          message_index = buff.index(message_just_acked) # figure out its index in our buffer
          current_window_size += message_index - last_index_acked # update the current window size based on the index last acked and this ack
                                                                  # note: it will remain unchanged if we have already received this ack
          last_index_acked = message_index # this message is now the new last index acked
          last_seq_num_acked = decoded['ack'] # this message is not the last sequence number acked
          if last_seq_num_acked > last_seq_num_sent: # if the ack we received is farther along than where we currently are in sending, such as
            last_seq_num_sent = last_seq_num_acked   # when we reset after a timeout but finally received the acks, fast forward where we are in the sending

      except (ValueError, KeyError, TypeError) as e:
        # received a corrupt packet, keep looping through recv
        log("[recv corrupt packet]")
        continue

    else: # if there was no ack to read, break out of the loop
      break


  # sending data portion of THE LOOP

  # if we just timed out, reset the current window size to the initial value
  # and start sending again from the last place we successfully received an ack from
  # and mark that we have not yet sent an eof during this timeout window
  if timed_out:
    current_window_size = sliding_window_initial_size
    last_seq_num_sent = last_seq_num_acked
    eof_sent_once = False

  # if we have already sent the eof this timeout window, set the current window size to 0 so we dont send it again 
  # and so that we wait on a timeout for its acknowledgement in the next run of THE LOOP
  if eof_sent_once:
    current_window_size = 0

  # check whether what we are about to send is the EOF
  eof = False
  if last_seq_num_sent >= buff[-1]['sequence']:
    eof = True

  # grab the message we want to send out of the buffer
  message_to_send = None
  if eof:
    message_to_send = buff[-1]
  else:
    message_to_send = [m for m in buff if m["sequence"] == last_seq_num_sent][0]
  
  # figure out the index of the message we want to send
  index_to_send = buff.index(message_to_send)
  
  # we only want to send eof message if 1) it has not been sent OR 2) we have just reset
  # only send a message if the window size isn't 0
  if current_window_size:
    # only send eof message if hasn't yet been sent this timeout window
    if eof:
      if not eof_sent_once:
        # if we successfully send it
        if send_individual_packet(index_to_send):
          eof_sent_once = True # note that we have sent it once now this timeout window
          current_window_size = 0 # reset the current window size to 0 so we wait on a timeout next run through THE LOOP
          last_seq_num_sent = message_to_send['sequence'] + 1 # update last sequence number sent
    elif send_individual_packet(index_to_send): # if we're sending a data packet, try to send it
      current_window_size -= 1 # if we succeed in sending it, decrement the current window size
      last_seq_num_sent += len(message_to_send['data']) # update the last sequence number sent 

