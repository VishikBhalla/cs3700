#!/usr/bin/python -u

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
TIMEOUT = 30
orderedACK = "ACCEPTED (in-order)"
outOfOrderACK = "ACCEPTED (out-of-order)"
IGNORED = "IGNORED"

# print the entire message
def printMessageInOrder(buff):
  sequence = 0
  while True:
    entry = buff[sequence]
    if entry['eof']:
      log("[completed]")
      sys.exit(0)
    else:
      sys.stdout.write(entry['data'])
      sequence += len(entry['data'])

def log(string):
  sys.stderr.write("\t\t\t\t\t"+datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# begin the shutdown process, sending eof ack ten times with 0.1 second wait in between
# if we receive another packet during shutdown, reset the timeer
def start_closing(buff):
  count = 0
  while count < 10:
    ready = select.select([sock], [sock], [], 0.1)
    if ready[0]: # new data from sender cas
      sock.recvfrom(MSG_SIZE)
      count = 0
    if ready[1]: # send ack case
      log("Resending eof ack")
      if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")
      time.sleep(0.1)
    count += 1
  printMessageInOrder(buff)
  sys.exit(0)

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

buff = {} # dictionary to store received messages
time_last_acked = {0: 0} # dictionary mapping sequence numbers to time last ack window started
ack_count = {0: 0} # dictionary mapping sequence numbers to number of times acked this ack window

# Now listen for packets
while True:

  # receive a packet
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data)

      # If the EOF flag is set, or if there is data, we accept it and add to buffer
      if (decoded['eof'] or decoded['data']):
        if buff.get(decoded['sequence']) is None:
          buff[decoded['sequence']] = decoded
        log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") " + outOfOrderACK)

      # if there is no entry in the ack tracking dictionaries, add them
      if not time_last_acked.get(decoded['sequence']):
        time_last_acked[decoded['sequence']] = 0
        ack_count[decoded['sequence']] = 0

      # figure out which message to ack
      # we want to ack the last message for which we have received all packets up to and including it
      sequence = 0
      preventry = None
      entry = {"sequence": 0, "data": "", "timestamp": decoded['timestamp'], "eof": False}
      ackedmsg = None
      eof = 0
      while True:
        preventry = entry
        entry = buff.get(sequence)
        if entry is None:
          # send ack for previous entry
          ackedmsg = preventry
          break
        else:
          if entry['eof']:
            ackedmsg = entry
            break
          sequence += len(entry['data'])

      # are we acking the eof? if so, we want to make sure we add one to the ack number
      # so that we do can differentiate between eof ack and last data packet ack
      if ackedmsg['eof']:
        eof = 1 

      # limit number of acks sent within a timeout window to 5 so we don't flood the network with identical acks
      timed_out = time.time() - time_last_acked[ackedmsg['sequence']] > decoded['timeout']
      if timed_out:
        ack_count[ackedmsg['sequence']] = 0 # if we timed out, reset the ack count to 0
        time_last_acked[ackedmsg['sequence']] = time.time() # and set the time last acked to now

      # only sent the ack if we just timed out of the ack count is less than 5
      if timed_out or ack_count[ackedmsg['sequence']] < 5:
        ack_count[ackedmsg['sequence']] = ack_count[ackedmsg['sequence']] + 1

        # prepare the message and try to send
        msg = json.dumps({"ack": ackedmsg['sequence'] + len(ackedmsg['data']) + eof, 'timestamp':ackedmsg['timestamp']})
        if sock.sendto(msg, addr) < len(msg):
          log("[error] unable to fully send packet")
      else: 
        log("Not sending duplicate ack ("+str(ackedmsg['sequence'] + len(ackedmsg['data']) + eof) +") within timeout")
      
      # if we have received the eof, start the shutdown process 
      if eof:
        start_closing(buff)

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)
