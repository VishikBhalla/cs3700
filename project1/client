#!/usr/bin/env python2

import argparse
import getopt
import socket
import ssl
import sys

# return the number of instances of c in searchString
def countInstances(c, searchString):
  found_count = 0
  for char in searchString:
    if char == c:
      found_count += 1
  return found_count

# receive an entire message on the specified socket until terminating newline
def receiveMessage(sock):
  mes = ''
  while 1:
    data = sock.recv(4096)
    mes += data
    # if last received character was a newline, we're done receiving the message
    if data[-1] == '\n':
      #print('# received message')
      break
  #print(mes)
  return mes

# send the HELLO message for the specified neuid on the provided socket
def sendHello(sock, neuid):
  hello = 'cs3700fall2018 HELLO {}\n'.format(neuid)
  #print('# sending hello message: ' + hello)
  sock.sendall(hello)

def main():
  # Parse command line arguments
  parser = argparse.ArgumentParser(description='Simple client program')
  parser.add_argument('hostname')
  parser.add_argument('NEU ID')
  parser.add_argument('-p', dest='port', type=int)
  parser.add_argument('-s', action="store_true", default=False, dest='ssl')
  args = parser.parse_args(sys.argv[1:]) # arguments exclude filename

  # get hostname from args
  hostname = args.hostname

  # get port from args if it was set, otherwise if ssl set default to 27994, else 27993
  port = 27993
  if args.port:
    port = args.port
  elif args.ssl:
    port = 27994

  # get neuid from args
  neuid = vars(args)['NEU ID']
  secretFlag = ''

  # Create a TCP/IP socket
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  if args.ssl:
    sock = ssl.wrap_socket(sock, ssl_version=ssl.PROTOCOL_TLSv1)

  # get remote ip
  remote_ip = socket.gethostbyname(hostname)
  #print('# Connecting to server, ' + hostname + ' (' + remote_ip + ')')
  
  # set the socket timeout and connect
  sock.settimeout(5)
  sock.connect((hostname, port))

  # print("# Connected")

  # send HELLO message to the server
  sendHello(sock, neuid)

  # event loop
  while 1:

    # receive and parse message
    message = receiveMessage(sock);
    message_list = message.split()

    # BYE case, print secret flag, close socket, and quit
    if message_list[1] == "BYE":
      secretFlag = message_list[2]
      print(secretFlag)
      sock.close()
      break

    # FIND case, count instances and send COUNT reply
    found_count = countInstances(message_list[2], message_list[3])

    count = 'cs3700fall2018 COUNT {}\n'.format(found_count)
    #print('# found {} instances of "{}" in the message'.format(found_count, message_list[2]))
    #print('# sending count message: ' + count)
    sock.sendall(count)

if __name__ == '__main__':
  main()
  
