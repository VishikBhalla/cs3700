#!/usr/bin/python -u

import argparse, socket, time, json, select, struct, math, string, copy

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

ROUTERIP = 'routerip'
NTWKPRFX = 'networkprefix'

##########################################################################################

# convert an ip address in a.b.c.d form to a binary string
def ip2bin(ipaddr):
    binvalue = ''.join(bin(int(x))[2:].zfill(8) for x in ipaddr.split('.'))
    return binvalue

# convert binary string to a.b.c.d ip address
def bin2ip(binaddr):
    ipparts = [int(binaddr[0:8], 2), int(binaddr[8:16], 2), int(binaddr[16:24], 2), int(binaddr[24:32], 2)]
    return ".".join(str(ipp) for ipp in ipparts)

# convert a netmask ip address to a cidr int representation
def nmsk2cidr(nmsk):
    binip = ip2bin(nmsk)
    return string.count(binip.split('0')[0], '1')

def getprefix(ntwk, nmsk):
    ntwkbin = ip2bin(ntwk)
    cidr = nmsk2cidr(nmsk)
    return bin2ip(ntwkbin[0:cidr].ljust(32, '0'))

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            ip2bin(network)
            if DEBUG: 
                print "Starting socket for", network, relation
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []

        daddrbin = ip2bin(daddr)
        if DEBUG:
            print '++++++++++++++++++++++++++++++++++++++++++++++++++++'
            print 'DEST ADDR BIN ' + daddrbin

        # iterate over routes, selecting those whose first cidr digits match daddrbin
        for route in self.routes:
            routebin = ip2bin(route[NTWK])
            cidr = nmsk2cidr(route[NMSK])
            if DEBUG:
                print 'CIDR ' + str(cidr)
                print 'ROUTE BIN ' + routebin 
            if (daddrbin[0:cidr] == routebin[0:cidr]):
                outroutes.append(route)
        if DEBUG:
            print 'OUTROUTES ' + json.dumps(outroutes)
            print '++++++++++++++++++++++++++++++++++++++++++++++++++++'
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        minval = min([len(r[APTH]) for r in routes])
        
        for r in routes:
            if len(r[APTH]) == minval:
                outroutes.append(r)
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        maxVal = max([r[LPRF] for r in routes])
        
        for r in routes:
            if r[LPRF] == maxVal:
                outroutes.append(r)
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        for r in routes:
            if r[SORG] == 'true':
                outroutes.append(r)
        if len(outroutes) == 0: 
            return routes
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        outroutes = []
        if 'IGP' in [r[ORIG] for r in routes]:
            outroutes = [r for r in routes if r[ORIG] == 'IGP']
        elif 'EGP' in [r[ORIG] for r in routes]:
            outroutes = [r for r in routes if r[ORIG] == 'EGP']
        else:
            outroutes = routes
        
        return outroutes

    def get_lowest_ip_address(self, routes):
        rmin = min([map(int, r[PEER].split('.')) for r in routes])
        return [r for r in routes if map(int, r[PEER].split('.')) == rmin]

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        print self.relations
        for r in routes:
            if self.relations[srcif] == CUST or self.relations[r[PEER]] == CUST:
                outroutes.append(r)
                    
        return outroutes

    def get_route(self, srcif, daddr):
        """ Select the best route for a given address   """
        # TODO
        peer = None
        routes = self.lookup_routes(daddr)
        
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.get_lowest_ip_address(routes)
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)

        print  routes

        if len(routes) == 0:
            return None
        
        peer = routes[0]['peer']     
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """ Forward a data packet   """
        route = self.get_route(srcif, packet[DEST])
        if route: 
            route.send(json.dumps(packet))
        else:
            newpacket = {
                SRCE: [r[ROUTERIP] for r in self.routes if r[PEER] == srcif][0],
                DEST: packet[SRCE],
                TYPE: NRTE,
                MESG: {}}
            self.sockets[srcif].send(json.dumps(newpacket))
        return True

    def coalesce(self):
        """ coalesce any routes that are right next to each other   """
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """ handle update packets   """
        routeentry = copy.deepcopy(packet[MESG])
        routeentry[PEER] = srcif        
        routeentry[ROUTERIP] = packet[DEST]

        networkprefix = getprefix(routeentry[NTWK], routeentry[NMSK])
        routeentry[NTWKPRFX] = networkprefix
        
        self.routes.append(routeentry)
        self.updates.append(packet)
        
        for (network, sock) in self.sockets.items():
            if network == packet[SRCE]:
                if DEBUG:
                    print 'Not sending update to origin'
            elif self.relations[packet[SRCE]] == CUST or self.relations[network] == CUST:
                if DEBUG:
                    print 'Forwarding update message'
                newpacket = {SRCE: packet[DEST],
                    DEST: network,
                    TYPE: UPDT,
                    MESG: packet[MESG]}
                sock.send(json.dumps(newpacket))
        return True
    
    def revoke(self, packet):
        """ handle revoke packets   """
        self.updates.append(packet)
        for entry in packet[MESG]:
            self.routes = [r for r in self.routes if r[NTWK] != entry[NTWK]
                    or r[NMSK] != entry[NMSK]
                    or packet[SRCE] != r[PEER]]
        for (network, sock) in self.sockets.items():
            if network == packet[SRCE]:
                if DEBUG:
                    print 'NOT SENDING revoke update'
            elif self.relations[packet[SRCE]] == CUST or self.relations[network] == CUST:
                if DEBUG:
                    print 'Forwarding revoke message'
                newpacket = {SRCE: packet[DEST],
                        DEST: network,
                        TYPE: RVKE,
                        MESG: packet[MESG]}
                sock.send(json.dumps(newpacket))
        return True

    def dump(self, packet):
        """ handles dump table requests """
        msg = [{NTWK: x[NTWK], NMSK: x[NMSK], PEER: x[PEER]} for x in self.routes]
        newpacket = {
            SRCE: packet[DEST],
            DEST: packet[SRCE],
            TYPE: TABL,
            MESG: msg}

        self.sockets[packet[SRCE]].send(json.dumps(newpacket))

        return True

    def handle_packet(self, srcif, packet):
        """ dispatches a packet """
        if packet[TYPE] == UPDT:
            return self.update(srcif, packet)
        if packet[TYPE] == DATA:
            return self.forward(srcif, packet)    
        if packet[TYPE] == DUMP:
            return self.dump(packet)
        if packet[TYPE] == RVKE:
            return self.revoke(packet)
        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
            
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if DEBUG:
                        print "Type: " + msg['type']
                        print "Src:" + msg['src']
                        print "Dst:" + msg['dst']
                        print "Msg:" + json.dumps(msg['msg'])
                        print "=================="
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
